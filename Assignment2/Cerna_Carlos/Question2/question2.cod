; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28315.0 

	TITLE	C:\Users\cbcerna\source\repos\CIS_450\Assignment2\Cerna_Carlos\Question2\question2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_x:DWORD
COMM	_y:DWORD
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	_getchar:PROC
EXTRN	___stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG9156	DB	'x = %d', 09H, 'y = %d', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File C:\Users\cbcerna\source\repos\CIS_450\Assignment2\Cerna_Carlos\Question2\question2.c
_TEXT	SEGMENT
_main	PROC

; 8    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9    : 	/* int main(int argc, char **argv, char **envp) {
; 10   : 		int i, j;
; 11   : 		j = 0;
; 12   : 
; 13   : 		for(i = 10 ; i < 30; i++) {
; 14   : 			if (i < 20) {
; 15   : 				j += i;
; 16   : 			}
; 17   : 			else {
; 18   : 				j -= i;
; 19   : 			}
; 20   : 		 }
; 21   : 		 x = i;
; 22   : 		 y = j;
; 23   : 	*/
; 24   : 
; 25   : 	_asm {
; 26   : 		//stack pointer limit of 8 bytes
; 27   : 		sub  esp, 8

  00003	83 ec 08	 sub	 esp, 8

; 28   : 
; 29   : 		mov DWORD PTR[ebp - 8], 0 //set j as 0

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR [ebp-8], 0

; 30   : 		mov DWORD PTR[ebp - 4], 10 // set i as 10

  0000d	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR [ebp-4], 10	; 0000000aH

; 31   : 		jmp L1 //enter loop

  00014	eb 00		 jmp	 SHORT $L1$3
$L1$3:

; 32   : 		L1:
; 33   : 			mov eax, DWORD PTR[ebp - 4] // set eax as i

  00016	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]

; 34   : 			cmp eax, 30 // compare i < 30

  00019	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 35   : 			jl L2 // jump if true

  0001c	7c 11		 jl	 SHORT $L2$4

; 36   : 			mov eax, DWORD PTR[ebp - 4]

  0001e	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]

; 37   : 			mov x, eax // x = i

  00021	a3 00 00 00 00	 mov	 DWORD PTR _x, eax

; 38   : 			mov eax, DWORD PTR[ebp - 8]

  00026	8b 45 f8	 mov	 eax, DWORD PTR [ebp-8]

; 39   : 			mov y, eax // y = j error

  00029	a3 00 00 00 00	 mov	 DWORD PTR _y, eax

; 40   : 			ret

  0002e	c3		 ret	 0
$L2$4:

; 41   : 		L2:
; 42   : 			mov eax, DWORD PTR[ebp - 4] //store i in eax

  0002f	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]

; 43   : 			cmp eax, 20 // compare i < 20

  00032	83 f8 14	 cmp	 eax, 20			; 00000014H

; 44   : 			jl L3

  00035	7c 0b		 jl	 SHORT $L3$5

; 45   : 			mov eax, DWORD PTR[ebp - 8] // j -= i

  00037	8b 45 f8	 mov	 eax, DWORD PTR [ebp-8]

; 46   : 			sub eax, DWORD PTR[ebp - 4]

  0003a	2b 45 fc	 sub	 eax, DWORD PTR [ebp-4]

; 47   : 			mov DWORD PTR[ebp - 8], eax

  0003d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax

; 48   : 			jmp L1

  00040	eb d4		 jmp	 SHORT $L1$3
$L3$5:

; 49   : 		L3:
; 50   : 			mov eax, DWORD PTR[ebp - 8] // j += i

  00042	8b 45 f8	 mov	 eax, DWORD PTR [ebp-8]

; 51   : 			add eax, DWORD PTR[ebp - 4]

  00045	03 45 fc	 add	 eax, DWORD PTR [ebp-4]

; 52   : 			mov DWORD PTR[ebp - 8], eax

  00048	89 45 f8	 mov	 DWORD PTR [ebp-8], eax

; 53   : 			jmp L1

  0004b	eb c9		 jmp	 SHORT $L1$3

; 54   : 
; 55   : 	    // deallocate local variables
; 56   : 		mov esp, ebp

  0004d	8b e5		 mov	 esp, ebp

; 57   : 	}
; 58   : 	printf("x = %d\ty = %d\n", x, y);

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR _y
  00054	50		 push	 eax
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _x
  0005b	51		 push	 ecx
  0005c	68 00 00 00 00	 push	 OFFSET $SG9156
  00061	e8 00 00 00 00	 call	 _printf
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   : 	getchar();

  00069	e8 00 00 00 00	 call	 _getchar

; 60   : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
