; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28315.0 

	TITLE	C:\Users\cbcerna\source\repos\CIS_450\Assignment2\Cerna_Carlos\Question1\question1.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_gi:DWORD
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_f
PUBLIC	_g
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG9152	DB	'gi = %d', 0aH, 00H
	ORG $+3
$SG9163	DB	'x1 = %d', 09H, 'x2 = %d', 09H, 'x3 = %d', 09H, 'x4 = %d', 0aH
	DB	00H
_DATA	ENDS
; Function compile flags: /Odtp
; File C:\Users\cbcerna\source\repos\CIS_450\Assignment2\Cerna_Carlos\Question1\question1.c
_TEXT	SEGMENT
_main	PROC

; 9    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : 
; 11   : 
; 12   : 	gi = f(10, 132, 132, 56);

  00003	6a 38		 push	 56			; 00000038H
  00005	68 84 00 00 00	 push	 132			; 00000084H
  0000a	68 84 00 00 00	 push	 132			; 00000084H
  0000f	6a 0a		 push	 10			; 0000000aH
  00011	e8 00 00 00 00	 call	 _f
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	a3 00 00 00 00	 mov	 DWORD PTR _gi, eax

; 13   : 
; 14   : 	printf("gi = %d\n", gi);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _gi
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET $SG9152
  00029	e8 00 00 00 00	 call	 _printf
  0002e	83 c4 08	 add	 esp, 8

; 15   : 
; 16   : 	return 0;

  00031	33 c0		 xor	 eax, eax

; 17   : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\cbcerna\source\repos\CIS_450\Assignment2\Cerna_Carlos\Question1\question1.c
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_g	PROC

; 80   : int g(int x1, int x2, int x3, int x4) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	printf("x1 = %d\tx2 = %d\tx3 = %d\tx4 = %d\n", x1, x2, x3, x4);

  00003	8b 45 14	 mov	 eax, DWORD PTR _x4$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _x3$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _x2$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET $SG9163
  00018	e8 00 00 00 00	 call	 _printf
  0001d	83 c4 14	 add	 esp, 20			; 00000014H

; 82   : 	gi = x1 - x3;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]
  00023	2b 4d 10	 sub	 ecx, DWORD PTR _x3$[ebp]
  00026	89 0d 00 00 00
	00		 mov	 DWORD PTR _gi, ecx

; 83   : 	return gi + x2 - x4;

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR _gi
  00031	03 45 0c	 add	 eax, DWORD PTR _x2$[ebp]
  00034	2b 45 14	 sub	 eax, DWORD PTR _x4$[ebp]

; 84   : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_g	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\cbcerna\source\repos\CIS_450\Assignment2\Cerna_Carlos\Question1\question1.c
_TEXT	SEGMENT
_f	PROC

; 19   : int f() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	/* int f(short ps1, unsigned char puc1, char pc1, int pi1) {
; 21   : 		short ls1;
; 22   : 		unsigned char luc1;
; 23   : 		char lc1;
; 24   : 		int li1;
; 25   : 
; 26   : 		ls1 = g(ps1, puc1, pc1, pi1);
; 27   : 
; 28   : 		li1 = pc1 + pi1;
; 29   : 
; 30   : 		luc1 = pi1 + 100;
; 31   : 
; 32   : 		lc1 = li1 + ls1 + luc1;
; 33   : 
; 34   : 		return gi + ls1 - luc1 - lc1; */
; 35   : 	_asm {
; 36   : 		// complete your code here
; 37   : 		sub  esp, 16

  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 38   : 
; 39   : 		//luc1 = g(lc1, li1, puc1, pi1);
; 40   : 		mov   eax, DWORD PTR[ebp + 20] // pi1

  00006	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 41   : 		push   eax

  00009	50		 push	 eax

; 42   : 		movzx   eax, BYTE PTR[ebp + 12] //puc1

  0000a	0f b6 45 0c	 movzx	 eax, BYTE PTR [ebp+12]

; 43   : 		push   eax

  0000e	50		 push	 eax

; 44   : 		mov    eax, DWORD PTR[ebp - 16] // li1

  0000f	8b 45 f0	 mov	 eax, DWORD PTR [ebp-16]

; 45   : 		push  eax

  00012	50		 push	 eax

; 46   : 		movsx   eax, BYTE PTR[ebp - 12]  // lc1

  00013	0f be 45 f4	 movsx	 eax, BYTE PTR [ebp-12]

; 47   : 		push  eax

  00017	50		 push	 eax

; 48   : 		call   g

  00018	e8 00 00 00 00	 call	 _g

; 49   : 		add   esp, 16

  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 50   : 
; 51   : 		// li1 = pc1 + pi1;
; 52   : 		movsx  eax, BYTE PTR[ebp + 16] // pc1

  00020	0f be 45 10	 movsx	 eax, BYTE PTR [ebp+16]

; 53   : 		add  eax, DWORD PTR[ebp + 20] // pi1

  00024	03 45 14	 add	 eax, DWORD PTR [ebp+20]

; 54   : 		mov DWORD PTR[ebp - 16], eax  // li1

  00027	89 45 f0	 mov	 DWORD PTR [ebp-16], eax

; 55   : 
; 56   : 		//luc1 = pi1 + 100;
; 57   : 		mov   eax, DWORD PTR[ebp + 20]   // pi1

  0002a	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 58   : 		add   eax, 100

  0002d	83 c0 64	 add	 eax, 100		; 00000064H

; 59   : 		mov   BYTE PTR[ebp - 8], al  // luc1 error

  00030	88 45 f8	 mov	 BYTE PTR [ebp-8], al

; 60   : 
; 61   : 		//lc1 = li1 + ls1 + luc1;
; 62   : 		mov eax, DWORD PTR[ebp - 16] // li1

  00033	8b 45 f0	 mov	 eax, DWORD PTR [ebp-16]

; 63   : 	    movsx  ecx, WORD PTR[ebp - 1] // ls1

  00036	0f bf 4d ff	 movsx	 ecx, WORD PTR [ebp-1]

; 64   : 		add  eax, ecx

  0003a	03 c1		 add	 eax, ecx

; 65   : 	    movzx  ecx, BYTE PTR[ebp - 8] // luc1

  0003c	0f b6 4d f8	 movzx	 ecx, BYTE PTR [ebp-8]

; 66   : 	    add  eax, ecx

  00040	03 c1		 add	 eax, ecx

; 67   : 	    mov BYTE PTR[ebp - 12], al  // lc1

  00042	88 45 f4	 mov	 BYTE PTR [ebp-12], al

; 68   : 
; 69   : 	    // return gi + ls1 - luc1 - lc1;
; 70   : 	    mov  eax, DWORD PTR gi // gi

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR _gi

; 71   : 	    movsx  ecx, WORD PTR[ebp - 10] // ls1

  0004a	0f bf 4d f6	 movsx	 ecx, WORD PTR [ebp-10]

; 72   : 	    add eax, ecx

  0004e	03 c1		 add	 eax, ecx

; 73   : 	    movzx  ecx, BYTE PTR[ebp - 8] // luc1

  00050	0f b6 4d f8	 movzx	 ecx, BYTE PTR [ebp-8]

; 74   : 	    sub  eax, ecx

  00054	2b c1		 sub	 eax, ecx

; 75   : 		movzx  ecx, BYTE PTR[ebp - 12] // lc1

  00056	0f b6 4d f4	 movzx	 ecx, BYTE PTR [ebp-12]

; 76   : 		sub  eax, ecx

  0005a	2b c1		 sub	 eax, ecx

; 77   : 	}
; 78   : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
