; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	c:\K-State\cis450\runs\2019S\Common\Assignment3\Assignment3\how_to_label.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_f
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG7444	DB	'i = %d', 09H, 'j = %d', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\k-state\cis450\runs\2019s\common\assignment3\assignment3\how_to_label.c
_TEXT	SEGMENT
_main	PROC

; 41   : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 	f();

  00003	e8 00 00 00 00	 call	 _f

; 43   : }

  00008	33 c0		 xor	 eax, eax
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\k-state\cis450\runs\2019s\common\assignment3\assignment3\how_to_label.c
_TEXT	SEGMENT
_i$ = -8						; size = 4
_j$ = -4						; size = 4
_f	PROC

; 2    : int f() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3    : 	int i, j;  // i at [ebp - 4] and j at [ebp - 8]
; 4    : 	i = 10;

  00006	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _i$[ebp], 10	; 0000000aH

; 5    : 	j = 5;

  0000d	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _j$[ebp], 5

; 6    : 
; 7    : /*	if (i < j) {
; 8    : 		i++;
; 9    : 	} else {
; 10   : 		j--'
; 11   : 	} */
; 12   : 
; 13   : 	_asm {
; 14   : 		// if (i < j) {
; 15   : 		mov eax, DWORD PTR[ebp - 4]  // eax <- i

  00014	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]

; 16   : 		cmp eax, DWORD PTR[ebp - 8]  // eax - j

  00017	3b 45 f8	 cmp	 eax, DWORD PTR [ebp-8]

; 17   : 		jge  SHORT L1				 // if (the result >= 0) jump to L1

  0001a	7d 0b		 jge	 SHORT $L1$3

; 18   : 				// in question2 in Assignment3, SHORT (8-bit displacement) should be enough
; 19   : 				// if you omit "SHORT", the compiler generates 32-bit displacement
; 20   : 		//   i++;
; 21   : 		mov eax, DWORD PTR[ebp - 4]  // eax <- i

  0001c	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]

; 22   : 		add eax, 1					 // eax <- eax + 1

  0001f	83 c0 01	 add	 eax, 1

; 23   : 		mov DWORD PTR[ebp - 4], eax  // i <- eax

  00022	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 24   : 		// }
; 25   : 		jmp SHORT L2

  00025	eb 09		 jmp	 SHORT $L2$4
$L1$3:

; 26   : 		// else {
; 27   : 	    //    j--;
; 28   : 	L1: mov eax, DWORD PTR[ebp - 8]  // eax <- j

  00027	8b 45 f8	 mov	 eax, DWORD PTR [ebp-8]

; 29   : 	    // Note
; 30   : 	    // L1:
; 31   : 	    //   mov eax, DWORD PTR[ebp - 8]
; 32   : 	    // is ok, too
; 33   : 		sub eax, 1					// eax <- eax - 1

  0002a	83 e8 01	 sub	 eax, 1

; 34   : 		mov DWORD PTR[ebp - 8], eax  //  j <- eax

  0002d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
$L2$4:

; 35   : 		// }
; 36   : 	L2:
; 37   : 	}
; 38   : 	printf("i = %d\tj = %d\n", i, j);

  00030	8b 45 fc	 mov	 eax, DWORD PTR _j$[ebp]
  00033	50		 push	 eax
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00037	51		 push	 ecx
  00038	68 00 00 00 00	 push	 OFFSET $SG7444
  0003d	e8 00 00 00 00	 call	 _printf
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
