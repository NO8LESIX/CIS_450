; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1Asm2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_gg
_DATA	SEGMENT
_gg	DD	0bH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_f
PUBLIC	_g
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG9160	DB	'%d', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1Asm2.c
_TEXT	SEGMENT
_main	PROC

; 36   : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   :    printf("%d\n", g(5, 10));

  00003	6a 0a		 push	 10			; 0000000aH
  00005	6a 05		 push	 5
  00007	e8 00 00 00 00	 call	 _g
  0000c	83 c4 08	 add	 esp, 8
  0000f	50		 push	 eax
  00010	68 00 00 00 00	 push	 OFFSET $SG9160
  00015	e8 00 00 00 00	 call	 _printf
  0001a	83 c4 08	 add	 esp, 8

; 38   : }

  0001d	33 c0		 xor	 eax, eax
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1Asm2.c
_TEXT	SEGMENT
_g	PROC

; 15   : int g() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   :     _asm {
; 17   :       sub  esp, 8   // MM  since x, y are not referred to, 

  00003	83 ec 08	 sub	 esp, 8

; 18   : 		// area for them are not allocated automatically 
; 19   :       mov  eax, DWORD PTR [ebp + 8]   // g1

  00006	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]

; 20   :       mov  DWORD PTR [ebp - 4], eax  // x

  00009	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 21   :       mov  eax, DWORD PTR [ebp + 12]  // g2

  0000c	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]

; 22   :       mov  DWORD PTR [ebp - 8], eax  // y

  0000f	89 45 f8	 mov	 DWORD PTR [ebp-8], eax

; 23   :       mov eax, DWORD PTR gg    // gg

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _gg

; 24   :       add eax, DWORD PTR [ebp - 4]  // x

  00017	03 45 fc	 add	 eax, DWORD PTR [ebp-4]

; 25   :       add eax, DWORD PTR [ebp - 8]  // y

  0001a	03 45 f8	 add	 eax, DWORD PTR [ebp-8]

; 26   :       mov DWORD PTR gg, eax  // gg

  0001d	a3 00 00 00 00	 mov	 DWORD PTR _gg, eax

; 27   :       push DWORD PTR gg  // gg

  00022	ff 35 00 00 00
	00		 push	 DWORD PTR _gg

; 28   :       push DWORD PTR [ebp - 8]  // y

  00028	ff 75 f8	 push	 DWORD PTR [ebp-8]

; 29   :       push DWORD PTR [ebp - 4]  // x

  0002b	ff 75 fc	 push	 DWORD PTR [ebp-4]

; 30   :       call f

  0002e	e8 00 00 00 00	 call	 _f

; 31   :       add esp, 12

  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   :       mov  esp, ebp   // MM  deallocate x and y

  00036	8b e5		 mov	 esp, ebp

; 33   :    }
; 34   : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_g	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1Asm2.c
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_gg$ = 16						; size = 4
_f	PROC

; 4    : int f(int x, int y, int gg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5    :    return x + y + gg;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  00009	03 45 10	 add	 eax, DWORD PTR _gg$[ebp]

; 6    : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
_f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
