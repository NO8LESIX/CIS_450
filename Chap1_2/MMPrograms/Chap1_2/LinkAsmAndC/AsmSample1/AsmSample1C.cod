; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1C.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_gg
_DATA	SEGMENT
_gg	DD	0bH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_f
PUBLIC	_g
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG9166	DB	'%d', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1C.c
_TEXT	SEGMENT
_main	PROC

; 16   : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   :    printf("%d\n", g(5, 10));

  00003	6a 0a		 push	 10			; 0000000aH
  00005	6a 05		 push	 5
  00007	e8 00 00 00 00	 call	 _g
  0000c	83 c4 08	 add	 esp, 8
  0000f	50		 push	 eax
  00010	68 00 00 00 00	 push	 OFFSET $SG9166
  00015	e8 00 00 00 00	 call	 _printf
  0001a	83 c4 08	 add	 esp, 8

; 18   : }

  0001d	33 c0		 xor	 eax, eax
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1C.c
_TEXT	SEGMENT
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_g1$ = 8						; size = 4
_g2$ = 12						; size = 4
_g	PROC

; 8    : int g(int g1, int g2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 9    :    int x, y;
; 10   :    x = g1;

  00006	8b 45 08	 mov	 eax, DWORD PTR _g1$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax

; 11   :    y = g2;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _g2$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 12   :    gg = gg + x + y;

  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _gg
  00018	03 55 f8	 add	 edx, DWORD PTR _x$[ebp]
  0001b	03 55 fc	 add	 edx, DWORD PTR _y$[ebp]
  0001e	89 15 00 00 00
	00		 mov	 DWORD PTR _gg, edx

; 13   :    return f(x, y, gg);

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _gg
  00029	50		 push	 eax
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 _f
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 14   : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_g	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\K-State\cis450\CoursePrograms\CS450_course_load\MMPrograms\Chap1_2\LinkAsmAndC\AsmSample1\AsmSample1C.c
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_gg$ = 16						; size = 4
_f	PROC

; 4    : int f(int x, int y, int gg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5    :    return x + y + gg;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  00009	03 45 10	 add	 eax, DWORD PTR _gg$[ebp]

; 6    : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
_f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
